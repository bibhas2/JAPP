JAPP is a high performance JSON parser written in C.

Build instructions
==================
To build, clone this repo. 

https://github.com/bibhas2/JAPP.git

Also clone Cute:

git clone https://github.com/bibhas2/Cute.git

Go into Cute folder and run:

make

Then, go into JAPP folder and run:

make

Usage
=====
Example JSON:

{
  "array": [10.5533E-2, "I \u2665 Miami", 22.89, true , false , null ], 
  "num": 11.23,
  "first-name": "Barry white"
}

const char *json = "{...}"; //A JSON string as above.
String *jsonString = stringFromCString(json); //Convert to a String
JSONParser *p = newJSONParser();
JSONObject *root = jsonParse(p, jsonString);

double d = jsonGetNumber(root, "num"); //Will be 11.23
String *s = jsonGetString(root, "first-name"); //"Barry white"

JSONObject *array = jsonGetArray(root, "array");

d = jsonGetNumberAt(array, 0); //10.5533E-2
s = jsonGetStringAt(array, 1);
printf("String is: %s\n", stringAsCString(s));

bool b = jsonGetBooleanAt(array, 3); //true
b = jsonIsNullAt(array, 5); //true
b = jsonIsNullAt(array, 0); //false

deleteJSONParser(p); //Free all parsing related memory
deleteString(jsonString);

Memory management
=================
All objects and strings returned by a parser method, such as jsonGetStringAt
manages its own memory and you do not need to free them. Simply call
deleteJSONParser() to destroy the parser and it will free up all
memory every allocated by the parser.

Once a parser is created, it can be used repeatedly to call 
jsonParse(). The parser will automatically delete all state for the previously
parsed document before parsing the next one.


